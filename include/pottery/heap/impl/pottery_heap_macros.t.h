/*
 * MIT License
 *
 * Copyright (c) 2020 Nicholas Fraser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef POTTERY_HEAP_IMPL
#error "This is an internal header. Do not include it."
#endif

#include "pottery/pottery_dependencies.h"



/*
 * Configuration
 */

#ifndef POTTERY_HEAP_PREFIX
    #error "POTTERY_HEAP_PREFIX is not defined."
#endif
#if !POTTERY_LIFECYCLE_CAN_SWAP
    #error "A move or swap expression is required."
#endif
#if !POTTERY_COMPARE_CAN_ORDER
    #error "An ordering comparison expression is required."
#endif

#ifndef POTTERY_HEAP_EXTERN
    #define POTTERY_HEAP_EXTERN /*nothing*/
#endif

#ifndef POTTERY_HEAP_USE_MOVE
    // Decide whether to use move or swap. We need a move expression to move
    // and a value type to define a temporary to move to.
    //
    // We prefer to move rather than swap if possible since this should result
    // in fewer moves. This could in theory be slower than swap if you have
    // some major optimization in swap, like if most of the contents of your
    // objects are identical and don't need to be swapped. If you don't want
    // heap to use move, define HEAP_USE_MOVE to 0, or just don't give it a
    // move expression.
    //
    // TODO: heap functions using move aren't actually implemented yet, it
    // always swaps.
    #if 0 && POTTERY_LIFECYCLE_CAN_MOVE && defined(POTTERY_HEAP_VALUE_TYPE)
        #define POTTERY_HEAP_USE_MOVE 1
    #else
        #define POTTERY_HEAP_USE_MOVE 0
    #endif
#endif

// See if we should accept a separate compare context parameter
#ifndef POTTERY_HEAP_CONTEXT_IS_COMPARE_CONTEXT
    #define POTTERY_HEAP_CONTEXT_IS_COMPARE_CONTEXT 0
#endif
#if defined(POTTERY_HEAP_COMPARE_CONTEXT_TYPE) && !POTTERY_HEAP_CONTEXT_IS_COMPARE_CONTEXT
    #define POTTERY_HEAP_SEPARATE_COMPARE_CONTEXT 1
#else
    #define POTTERY_HEAP_SEPARATE_COMPARE_CONTEXT 0
#endif

// See if we should accept a separate lifecycle context parameter
#ifndef POTTERY_HEAP_CONTEXT_IS_LIFECYCLE_CONTEXT
    #define POTTERY_HEAP_CONTEXT_IS_LIFECYCLE_CONTEXT 0
#endif
#if defined(POTTERY_HEAP_LIFECYCLE_CONTEXT_TYPE) && !POTTERY_HEAP_CONTEXT_IS_LIFECYCLE_CONTEXT
    #define POTTERY_HEAP_SEPARATE_LIFECYCLE_CONTEXT 1
#else
    #define POTTERY_HEAP_SEPARATE_LIFECYCLE_CONTEXT 0
#endif



// functions

#define POTTERY_HEAP_NAME(name) POTTERY_CONCAT(POTTERY_HEAP_PREFIX, name)

// legacy stuff
#define pottery_access POTTERY_HEAP_NAME(_access)
#define pottery_value_t POTTERY_HEAP_NAME(_legacy_value_t) // TODO remove
#define pottery_accessor_t POTTERY_HEAP_NAME(_accessor_t)
#define pottery_context_t POTTERY_HEAP_NAME(_context_t)
#define pottery_state_t POTTERY_HEAP_NAME(_state_t)

//!!! AUTOGENERATED:heap/rename.t PREFIX:pottery_heap MACRO:POTTERY_HEAP_NAME
    // This block is auto-generated. Do not modify until END_AUTOGENERATED.
    // Renames insertion_sort identifiers with prefix "pottery_heap"
    // using macro POTTERY_HEAP_NAME()
    #define pottery_heap_ref_t POTTERY_HEAP_NAME(_ref_t)
    #define pottery_heap_value_t POTTERY_HEAP_NAME(_value_t)
    #define pottery_heap_context_t POTTERY_HEAP_NAME(_context_t)
    #define pottery_heap_state_t POTTERY_HEAP_NAME(_state_t)

    #define pottery_heap POTTERY_HEAP_NAME()
    #define pottery_heap_access POTTERY_HEAP_NAME(_access)
    #define pottery_heap_before POTTERY_HEAP_NAME(_before)
    #define pottery_heap_set_index POTTERY_HEAP_NAME(_set_index)
    #define pottery_heap_move POTTERY_HEAP_NAME(_move)
    #define pottery_heap_swap POTTERY_HEAP_NAME(_swap)

    #define pottery_heap_parent POTTERY_HEAP_NAME(_parent)
    #define pottery_heap_child_left POTTERY_HEAP_NAME(_child_left)
    #define pottery_heap_child_right POTTERY_HEAP_NAME(_child_right)
    #define pottery_heap_sift_down POTTERY_HEAP_NAME(_sift_down)
    #define pottery_heap_sift_up POTTERY_HEAP_NAME(_sift_up)
    #define pottery_heap_build_impl POTTERY_HEAP_NAME(_build_impl)
    #define pottery_heap_push_impl POTTERY_HEAP_NAME(_push_impl)
    #define pottery_heap_pop_impl POTTERY_HEAP_NAME(_pop_impl)
    #define pottery_heap_remove_impl POTTERY_HEAP_NAME(_remove_impl)
    #define pottery_heap_valid_impl POTTERY_HEAP_NAME(_valid_impl)
    #define pottery_heap_valid_count_impl POTTERY_HEAP_NAME(_valid_count_impl)
    #define pottery_heap_build POTTERY_HEAP_NAME(_build)
    #define pottery_heap_push POTTERY_HEAP_NAME(_push)
    #define pottery_heap_pop POTTERY_HEAP_NAME(_pop)
    #define pottery_heap_remove POTTERY_HEAP_NAME(_remove)
    #define pottery_heap_valid POTTERY_HEAP_NAME(_valid)
    #define pottery_heap_valid_count POTTERY_HEAP_NAME(_valid_count)
//!!! END_AUTOGENERATED



// lifecycle functions
#ifdef POTTERY_HEAP_EXTERNAL_LIFECYCLE
    #define POTTERY_HEAP_LIFECYCLE_NAME(x) POTTERY_CONCAT(POTTERY_HEAP_EXTERNAL_LIFECYCLE, x)
#else
    #define POTTERY_HEAP_LIFECYCLE_NAME(x) POTTERY_HEAP_NAME(POTTERY_CONCAT(_lifecycle, x))
#endif
//!!! AUTOGENERATED:lifecycle/rename.t PREFIX:pottery_heap_lifecycle MACRO:POTTERY_HEAP_LIFECYCLE_NAME
    // This block is auto-generated. Do not modify until END_AUTOGENERATED.

    // Renames lifecycle identifiers with prefix "pottery_heap_lifecycle" using macro POTTERY_HEAP_LIFECYCLE_NAME()

    // types
    #define pottery_heap_lifecycle_value_t POTTERY_HEAP_LIFECYCLE_NAME(_value_t)
    #define pottery_heap_lifecycle_ref_t POTTERY_HEAP_LIFECYCLE_NAME(_ref_t)
    #define pottery_heap_lifecycle_const_ref_t POTTERY_HEAP_LIFECYCLE_NAME(_const_ref_t)
    #define pottery_heap_lifecycle_context_t POTTERY_HEAP_LIFECYCLE_NAME(_context_t)

    // fundamental operations
    #define pottery_heap_lifecycle_init_steal POTTERY_HEAP_LIFECYCLE_NAME(_init_steal)
    #define pottery_heap_lifecycle_init_copy POTTERY_HEAP_LIFECYCLE_NAME(_init_copy)
    #define pottery_heap_lifecycle_init POTTERY_HEAP_LIFECYCLE_NAME(_init)
    #define pottery_heap_lifecycle_destroy POTTERY_HEAP_LIFECYCLE_NAME(_destroy)
    #define pottery_heap_lifecycle_swap POTTERY_HEAP_LIFECYCLE_NAME(_swap)
    #define pottery_heap_lifecycle_move POTTERY_HEAP_LIFECYCLE_NAME(_move)
    #define pottery_heap_lifecycle_steal POTTERY_HEAP_LIFECYCLE_NAME(_steal)
    #define pottery_heap_lifecycle_copy POTTERY_HEAP_LIFECYCLE_NAME(_copy)

    // bulk operations
    #define pottery_heap_lifecycle_destroy_bulk POTTERY_HEAP_LIFECYCLE_NAME(_destroy_bulk)
    #define pottery_heap_lifecycle_move_bulk POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk)
    #define pottery_heap_lifecycle_move_bulk_restrict POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_restrict)
    #define pottery_heap_lifecycle_move_bulk_restrict_impl POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_restrict_impl)
    #define pottery_heap_lifecycle_move_bulk_up POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_up)
    #define pottery_heap_lifecycle_move_bulk_up_impl POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_up_impl)
    #define pottery_heap_lifecycle_move_bulk_down POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_down)
    #define pottery_heap_lifecycle_move_bulk_down_impl POTTERY_HEAP_LIFECYCLE_NAME(_move_bulk_down_impl)

    // C++
    #define pottery_heap_lifecycle_construct POTTERY_HEAP_LIFECYCLE_NAME(_construct)
    #define pottery_heap_lifecycle_assign POTTERY_HEAP_LIFECYCLE_NAME(_assign)
//!!! END_AUTOGENERATED



// compare functions
#ifdef POTTERY_HEAP_EXTERNAL_COMPARE
    #define POTTERY_HEAP_COMPARE_NAME(x) POTTERY_CONCAT(POTTERY_HEAP_EXTERNAL_COMPARE, x)
#else
    #define POTTERY_HEAP_COMPARE_NAME(x) POTTERY_HEAP_NAME(POTTERY_CONCAT(_compare, x))
#endif
//!!! AUTOGENERATED:compare/rename.t PREFIX:pottery_heap_compare MACRO:POTTERY_HEAP_COMPARE_NAME
    // This block is auto-generated. Do not modify until END_AUTOGENERATED.
    // Renames compare identifiers with prefix "pottery_heap_compare"
    // using macro POTTERY_HEAP_COMPARE_NAME()
    #define pottery_heap_compare_ref_t POTTERY_HEAP_COMPARE_NAME(_ref_t)
    #define pottery_heap_compare_value_t POTTERY_HEAP_COMPARE_NAME(_value_t)
    #define pottery_heap_compare_context_t POTTERY_HEAP_COMPARE_NAME(_context_t)

    #define pottery_heap_compare_three_way POTTERY_HEAP_COMPARE_NAME(_three_way)
    #define pottery_heap_compare_equal POTTERY_HEAP_COMPARE_NAME(_equal)
    #define pottery_heap_compare_not_equal POTTERY_HEAP_COMPARE_NAME(_not_equal)
    #define pottery_heap_compare_less POTTERY_HEAP_COMPARE_NAME(_less)
    #define pottery_heap_compare_less_or_equal POTTERY_HEAP_COMPARE_NAME(_less_or_equal)
    #define pottery_heap_compare_greater POTTERY_HEAP_COMPARE_NAME(_greater)
    #define pottery_heap_compare_greater_or_equal POTTERY_HEAP_COMPARE_NAME(_greater_or_equal)

    #define pottery_heap_compare_min POTTERY_HEAP_COMPARE_NAME(_min)
    #define pottery_heap_compare_max POTTERY_HEAP_COMPARE_NAME(_max)
    #define pottery_heap_compare_clamp POTTERY_HEAP_COMPARE_NAME(_clamp)
    #define pottery_heap_compare_median POTTERY_HEAP_COMPARE_NAME(_median)
//!!! END_AUTOGENERATED
